#![doc = "Peripheral access API for FU740 microcontrollers (generated using svd2rust v0.19.0 (189548a 2021-05-30))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.19.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(const_err)]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {}
#[doc(hidden)]
pub union Vector {
    pub _handler: unsafe extern "C" fn(),
    pub _reserved: usize,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[no_mangle]
pub static __EXTERNAL_INTERRUPTS: [Vector; 0] = [];
#[doc = "From sifive,ccache0,control peripheral generator"]
pub struct SIFIVE_CCACHE0_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_CCACHE0_0 {}
impl SIFIVE_CCACHE0_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_ccache0_0::RegisterBlock = 0x0201_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_ccache0_0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SIFIVE_CCACHE0_0 {
    type Target = sifive_ccache0_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_CCACHE0_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_CCACHE0_0").finish()
    }
}
#[doc = "From sifive,ccache0,control peripheral generator"]
pub mod sifive_ccache0_0;
#[doc = "From riscv,clint0,control peripheral generator"]
pub struct RISCV_CLINT0_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RISCV_CLINT0_0 {}
impl RISCV_CLINT0_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const riscv_clint0_0::RegisterBlock = 0x0200_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const riscv_clint0_0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RISCV_CLINT0_0 {
    type Target = riscv_clint0_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RISCV_CLINT0_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RISCV_CLINT0_0").finish()
    }
}
#[doc = "From riscv,clint0,control peripheral generator"]
pub mod riscv_clint0_0;
#[doc = "From sifive,gpio0,control peripheral generator"]
pub struct SIFIVE_GPIO0_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_GPIO0_0 {}
impl SIFIVE_GPIO0_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_gpio0_0::RegisterBlock = 0x1006_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_gpio0_0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SIFIVE_GPIO0_0 {
    type Target = sifive_gpio0_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_GPIO0_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_GPIO0_0").finish()
    }
}
#[doc = "From sifive,gpio0,control peripheral generator"]
pub mod sifive_gpio0_0;
#[doc = "From sifive,i2c0,control peripheral generator"]
pub struct SIFIVE_I2C0_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_I2C0_0 {}
impl SIFIVE_I2C0_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_i2c0_0::RegisterBlock = 0x1003_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_i2c0_0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SIFIVE_I2C0_0 {
    type Target = sifive_i2c0_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_I2C0_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_I2C0_0").finish()
    }
}
#[doc = "From sifive,i2c0,control peripheral generator"]
pub mod sifive_i2c0_0;
#[doc = "From sifive,i2c0,control peripheral generator"]
pub struct SIFIVE_I2C0_1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_I2C0_1 {}
impl SIFIVE_I2C0_1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_i2c0_1::RegisterBlock = 0x1003_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_i2c0_1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SIFIVE_I2C0_1 {
    type Target = sifive_i2c0_1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_I2C0_1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_I2C0_1").finish()
    }
}
#[doc = "From sifive,i2c0,control peripheral generator"]
pub mod sifive_i2c0_1;
#[doc = "From riscv,plic0,control peripheral generator"]
pub struct RISCV_PLIC0_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RISCV_PLIC0_0 {}
impl RISCV_PLIC0_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const riscv_plic0_0::RegisterBlock = 0x0c00_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const riscv_plic0_0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RISCV_PLIC0_0 {
    type Target = riscv_plic0_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RISCV_PLIC0_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RISCV_PLIC0_0").finish()
    }
}
#[doc = "From riscv,plic0,control peripheral generator"]
pub mod riscv_plic0_0;
#[doc = "From sifive,pwm0,control peripheral generator"]
pub struct SIFIVE_PWM0_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_PWM0_0 {}
impl SIFIVE_PWM0_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_pwm0_0::RegisterBlock = 0x1002_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_pwm0_0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SIFIVE_PWM0_0 {
    type Target = sifive_pwm0_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_PWM0_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_PWM0_0").finish()
    }
}
#[doc = "From sifive,pwm0,control peripheral generator"]
pub mod sifive_pwm0_0;
#[doc = "From sifive,pwm0,control peripheral generator"]
pub struct SIFIVE_PWM0_1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_PWM0_1 {}
impl SIFIVE_PWM0_1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_pwm0_1::RegisterBlock = 0x1002_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_pwm0_1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SIFIVE_PWM0_1 {
    type Target = sifive_pwm0_1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_PWM0_1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_PWM0_1").finish()
    }
}
#[doc = "From sifive,pwm0,control peripheral generator"]
pub mod sifive_pwm0_1;
#[doc = "From sifive,uart0,control peripheral generator"]
pub struct SIFIVE_UART0_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_UART0_0 {}
impl SIFIVE_UART0_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_uart0_0::RegisterBlock = 0x1001_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_uart0_0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SIFIVE_UART0_0 {
    type Target = sifive_uart0_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_UART0_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_UART0_0").finish()
    }
}
#[doc = "From sifive,uart0,control peripheral generator"]
pub mod sifive_uart0_0;
#[doc = "From sifive,uart0,control peripheral generator"]
pub struct SIFIVE_UART0_1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_UART0_1 {}
impl SIFIVE_UART0_1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_uart0_1::RegisterBlock = 0x1001_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_uart0_1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SIFIVE_UART0_1 {
    type Target = sifive_uart0_1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_UART0_1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_UART0_1").finish()
    }
}
#[doc = "From sifive,uart0,control peripheral generator"]
pub mod sifive_uart0_1;
#[doc = "From sifive,spi0,control peripheral generator"]
pub struct SIFIVE_SPI0_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_SPI0_0 {}
impl SIFIVE_SPI0_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_spi0_0::RegisterBlock = 0x1004_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_spi0_0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SIFIVE_SPI0_0 {
    type Target = sifive_spi0_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_SPI0_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_SPI0_0").finish()
    }
}
#[doc = "From sifive,spi0,control peripheral generator"]
pub mod sifive_spi0_0;
#[doc = "From sifive,spi0,control peripheral generator"]
pub struct SIFIVE_SPI0_1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_SPI0_1 {}
impl SIFIVE_SPI0_1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_spi0_1::RegisterBlock = 0x1004_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_spi0_1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SIFIVE_SPI0_1 {
    type Target = sifive_spi0_1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_SPI0_1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_SPI0_1").finish()
    }
}
#[doc = "From sifive,spi0,control peripheral generator"]
pub mod sifive_spi0_1;
#[doc = "From sifive,spi0,control peripheral generator"]
pub struct SIFIVE_SPI0_2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_SPI0_2 {}
impl SIFIVE_SPI0_2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_spi0_2::RegisterBlock = 0x1005_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_spi0_2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SIFIVE_SPI0_2 {
    type Target = sifive_spi0_2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_SPI0_2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_SPI0_2").finish()
    }
}
#[doc = "From sifive,spi0,control peripheral generator"]
pub mod sifive_spi0_2;
#[doc = "From sifive,test0,control peripheral generator"]
pub struct SIFIVE_TEST0_0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIFIVE_TEST0_0 {}
impl SIFIVE_TEST0_0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sifive_test0_0::RegisterBlock = 0x4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sifive_test0_0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SIFIVE_TEST0_0 {
    type Target = sifive_test0_0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SIFIVE_TEST0_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SIFIVE_TEST0_0").finish()
    }
}
#[doc = "From sifive,test0,control peripheral generator"]
pub mod sifive_test0_0;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "SIFIVE_CCACHE0_0"]
    pub SIFIVE_CCACHE0_0: SIFIVE_CCACHE0_0,
    #[doc = "RISCV_CLINT0_0"]
    pub RISCV_CLINT0_0: RISCV_CLINT0_0,
    #[doc = "SIFIVE_GPIO0_0"]
    pub SIFIVE_GPIO0_0: SIFIVE_GPIO0_0,
    #[doc = "SIFIVE_I2C0_0"]
    pub SIFIVE_I2C0_0: SIFIVE_I2C0_0,
    #[doc = "SIFIVE_I2C0_1"]
    pub SIFIVE_I2C0_1: SIFIVE_I2C0_1,
    #[doc = "RISCV_PLIC0_0"]
    pub RISCV_PLIC0_0: RISCV_PLIC0_0,
    #[doc = "SIFIVE_PWM0_0"]
    pub SIFIVE_PWM0_0: SIFIVE_PWM0_0,
    #[doc = "SIFIVE_PWM0_1"]
    pub SIFIVE_PWM0_1: SIFIVE_PWM0_1,
    #[doc = "SIFIVE_UART0_0"]
    pub SIFIVE_UART0_0: SIFIVE_UART0_0,
    #[doc = "SIFIVE_UART0_1"]
    pub SIFIVE_UART0_1: SIFIVE_UART0_1,
    #[doc = "SIFIVE_SPI0_0"]
    pub SIFIVE_SPI0_0: SIFIVE_SPI0_0,
    #[doc = "SIFIVE_SPI0_1"]
    pub SIFIVE_SPI0_1: SIFIVE_SPI0_1,
    #[doc = "SIFIVE_SPI0_2"]
    pub SIFIVE_SPI0_2: SIFIVE_SPI0_2,
    #[doc = "SIFIVE_TEST0_0"]
    pub SIFIVE_TEST0_0: SIFIVE_TEST0_0,
}
impl Peripherals {
    #[doc = r"Returns all the peripherals *once*"]
    #[inline]
    pub fn take() -> Option<Self> {
        riscv::interrupt::free(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                None
            } else {
                Some(unsafe { Peripherals::steal() })
            }
        })
    }
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            SIFIVE_CCACHE0_0: SIFIVE_CCACHE0_0 {
                _marker: PhantomData,
            },
            RISCV_CLINT0_0: RISCV_CLINT0_0 {
                _marker: PhantomData,
            },
            SIFIVE_GPIO0_0: SIFIVE_GPIO0_0 {
                _marker: PhantomData,
            },
            SIFIVE_I2C0_0: SIFIVE_I2C0_0 {
                _marker: PhantomData,
            },
            SIFIVE_I2C0_1: SIFIVE_I2C0_1 {
                _marker: PhantomData,
            },
            RISCV_PLIC0_0: RISCV_PLIC0_0 {
                _marker: PhantomData,
            },
            SIFIVE_PWM0_0: SIFIVE_PWM0_0 {
                _marker: PhantomData,
            },
            SIFIVE_PWM0_1: SIFIVE_PWM0_1 {
                _marker: PhantomData,
            },
            SIFIVE_UART0_0: SIFIVE_UART0_0 {
                _marker: PhantomData,
            },
            SIFIVE_UART0_1: SIFIVE_UART0_1 {
                _marker: PhantomData,
            },
            SIFIVE_SPI0_0: SIFIVE_SPI0_0 {
                _marker: PhantomData,
            },
            SIFIVE_SPI0_1: SIFIVE_SPI0_1 {
                _marker: PhantomData,
            },
            SIFIVE_SPI0_2: SIFIVE_SPI0_2 {
                _marker: PhantomData,
            },
            SIFIVE_TEST0_0: SIFIVE_TEST0_0 {
                _marker: PhantomData,
            },
        }
    }
}
